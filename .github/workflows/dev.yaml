name: CI/CD Pipeline for Industrial IoT Application

on:
  workflow_dispatch:  # Manually trigger the workflow

#on:
#  pull_request:
#    branches:
#      - dev
#      - uat
#      - prod

jobs:
  prod:
    runs-on: ubuntu-latest
    environment: prod
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set Up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'

    - name: Install Dependencies
      run: npm install

    - name: Lint Code
      run: npm run lint

    - name: Unit Test
      run: npm run test

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1

    # - name: Setup Terraform
    #   uses: hashicorp/setup-terraform@v2
         
    # - name: Terraform fmt
    #   run: terraform fmt -check

    # - name: Terraform Init
    #   run: terraform init

    # - name: Terraform Validate
    #   run: terraform validate

    # - name: Start LocalStack
    #   uses: LocalStack/setup-localstack@v0.2.2
    #   with:
    #     image-tag: 'latest'
    #     install-awslocal: 'true'
          

    # - name: Wait for LocalStack to be ready
    #   run: |
    #         echo "Waiting for LocalStack to be ready..."
    #         while ! curl -s http://localhost:4566/_localstack/ready; do
    #           echo "LocalStack not ready yet, retrying in 5 seconds..."
    #           sleep 5
    #         done
    #         echo "LocalStack is ready!" 

    # - name: Terraform Plan
    #   run: terraform plan

    # - name: Reset LocalStack state
    #   run: |
    #     curl -X POST http://localhost:4566/_localstack/reset

    # - name: Terraform State List
    #   run: terraform state list

    # - name: Terraform Destory 
    #   run: terraform destroy -auto-approve

    # - name: Run Terraform Apply (LocalStack)
    #   env:
    #        USE_LOCALSTACK: "true"
    #   run: |
    #       terraform apply -target=module.lab02 -auto-approve

    # - name: Terraform Destroy
    #   run: terraform destroy -auto-approve

  #  - name: Terraform State
  #    run: terraform state rm module.lab01.aws_ses_email_identity.delivery_alert_email

  #  - name: Terraform State
  #    run: terraform state rm module.lab01.aws_ses_email_identity.source_alert_email

  #  - name: Destroy Delivery Email
  #    run: terraform destroy -target=module.lab01.aws_ses_email_identity.delivery_alert_email

  #  - name: Destroy Source Email
  #    run: terraform destroy -target=module.lab01.aws_ses_email_identity.source_alert_email

  # uat:
  #   runs-on: ubuntu-latest
  #   needs: dev
  #   if: github.base_ref == 'uat' || github.base_ref == 'prod'
  #   environment: uat 

  #   steps:
  #     - name: Deploy
  #       run: echo "deploy to uat"

  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Set Up Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 18
  #         cache: 'npm'

  #     - name: Install Dependencies
  #       run: npm install

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ap-southeast-1

    - name: Install Snyk
      run: npm install -g snyk

    - name: Authenticate Snyk
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      run: snyk auth $SNYK_TOKEN

    - name: Run Snyk code test
      run: snyk code test

    - name: Run Snyk ignore 
      run: snyk ignore --id=SNYK-CC-AWS-415

    - name: Run Snyk iac test
      run: snyk iac test

    - name: Run Snyk test
      run: snyk test     

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Format
      run: terraform fmt -recursive

    - name: Terraform fmt
      run: terraform fmt -check

    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      run: terraform plan

    - name: Terraform Apply
      run: terraform apply -auto-approve

  # prod:
  #   runs-on: ubuntu-latest
  #   needs: uat
  #   if: github.base_ref == 'prod'
  #   environment: prod 

  #   steps:
  #     - name: Deploy
  #       run: echo "deploy to prod"

  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Set Up Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 18
  #         cache: 'npm'

  #     - name: Install Dependencies
  #       run: npm install

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ap-southeast-1
    
  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v2

  #     - name: Terraform Init
  #       run: terraform init

  #     - name: Terraform Plan
  #       run: terraform plan

  #     - name: Terraform Apply
  #       run: terraform apply -auto-approve
      

  #   env:
  #        AWS_REGION: ap-southeast-1
  #        DYNAMODB_TABLE: shop_floor_alerts
    
  #   steps:
  #   - name: Checkout Code
  #     uses: actions/checkout@v4
    
  #   - name: Set Up Node.js
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: 18
  #       cache: 'npm'
    
  #   - name: Install Dependencies
  #     run: npm install
    
  #   - name: Configure AWS Credentials
  #     uses: aws-actions/configure-aws-credentials@v2
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       aws-region: ${{ env.AWS_REGION }}
    
  #   - name: Setup Terraform
  #     uses: hashicorp/setup-terraform@v2

  #   - name: Terraform Init
  #     run: terraform init
 
    #  - name: Terraform Apply (Deploy Infrastructure)
    #    run: terraform apply -auto-approve
 
    #  - name: Wait for Deployment (Ensure services are up)
    #    run: sleep 60
 
    #  - name: Insert Item into DynamoDB
    #    env:
    #      DYNAMODB_TABLE: "shop_floor_alerts"  # DynamoDB table name
    #      AWS_REGION: "ap-southeast-1"         # AWS Region
       
    #    run: |
    #      aws dynamodb put-item --table-name $DYNAMODB_TABLE --item '{
    #        "PK": {"S": "PlantA_Line1"},
    #        "SK": {"S": "KpiName_Production Efficiency"},
    #        "Plant": {"S": "PlantA"},
    #        "Line": {"S": "Line1"},
    #        "KpiName": {"S": "Production Efficiency"},
    #        "KpiValue": {"N": "95"},
    #        "ThresholdValue": {"N": "90"}
    #      }' --region $AWS_REGION

